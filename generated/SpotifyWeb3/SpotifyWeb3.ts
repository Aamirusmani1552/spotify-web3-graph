// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AlbumAdded extends ethereum.Event {
  get params(): AlbumAdded__Params {
    return new AlbumAdded__Params(this);
  }
}

export class AlbumAdded__Params {
  _event: AlbumAdded;

  constructor(event: AlbumAdded) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get albumAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get songsCount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timeStamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get albumName(): string {
    return this._event.parameters[5].value.toString();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class SpotifyWeb3__getAlbumByIdResultValue0Struct extends ethereum.Tuple {
  get owner(): Address {
    return this[0].toAddress();
  }

  get albumAddress(): Address {
    return this[1].toAddress();
  }

  get songsCount(): BigInt {
    return this[2].toBigInt();
  }

  get timeStamp(): BigInt {
    return this[3].toBigInt();
  }

  get albumName(): string {
    return this[4].toString();
  }
}

export class SpotifyWeb3 extends ethereum.SmartContract {
  static bind(address: Address): SpotifyWeb3 {
    return new SpotifyWeb3("SpotifyWeb3", address);
  }

  getAlbumById(id: BigInt): SpotifyWeb3__getAlbumByIdResultValue0Struct {
    let result = super.call(
      "getAlbumById",
      "getAlbumById(uint256):((address,address,uint32,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );

    return changetype<SpotifyWeb3__getAlbumByIdResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAlbumById(
    id: BigInt
  ): ethereum.CallResult<SpotifyWeb3__getAlbumByIdResultValue0Struct> {
    let result = super.tryCall(
      "getAlbumById",
      "getAlbumById(uint256):((address,address,uint32,uint256,string))",
      [ethereum.Value.fromUnsignedBigInt(id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SpotifyWeb3__getAlbumByIdResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getAlbumCount(): BigInt {
    let result = super.call("getAlbumCount", "getAlbumCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getAlbumCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAlbumCount",
      "getAlbumCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddAlbumCall extends ethereum.Call {
  get inputs(): AddAlbumCall__Inputs {
    return new AddAlbumCall__Inputs(this);
  }

  get outputs(): AddAlbumCall__Outputs {
    return new AddAlbumCall__Outputs(this);
  }
}

export class AddAlbumCall__Inputs {
  _call: AddAlbumCall;

  constructor(call: AddAlbumCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get albumAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get songsCount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get albumName(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AddAlbumCall__Outputs {
  _call: AddAlbumCall;

  constructor(call: AddAlbumCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
